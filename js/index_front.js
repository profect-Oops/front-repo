const socket = new SockJS("/ws");
const stompClient = Stomp.over(socket);

// ‚úÖ Í¥ÄÏã¨ ÏûàÎäî ÏΩîÏù∏ Î™©Î°ù (Ïó¨Í∏∞Ïóê ÏóÜÎäî ÏΩîÏù∏ÏùÄ Î¨¥Ïãú)
const TARGET_COINS = [
    "KRW-XRP", "KRW-BTC", "KRW-ETH", "KRW-QTUM",
    "KRW-WAVES", "KRW-XEM", "KRW-ETC", "KRW-NEO",
    "KRW-SNT", "KRW-MTL"
];

// ‚úÖ ÌïúÍ∏Ä Ïù¥Î¶Ñ Îß§Ìïë (Upbit API Ìò∏Ï∂ú ÏóÜÏù¥ ÏßÅÏ†ë Îß§Ìïë)
const marketNames = {
    "KRW-XRP": { name: "ÏóëÏä§ÏïåÌîº", ticker: "XRP" },
    "KRW-BTC": { name: "ÎπÑÌä∏ÏΩîÏù∏", ticker: "BTC" },
    "KRW-ETH": { name: "Ïù¥ÎçîÎ¶¨ÏõÄ", ticker: "ETH" },
    "KRW-QTUM": { name: "ÌÄÄÌÖÄ", ticker: "QTUM" },
    "KRW-WAVES": { name: "Ïõ®Ïù¥Î∏å", ticker: "WAVES" },
    "KRW-XEM": { name: "ÎÑ¥", ticker: "XEM" },
    "KRW-ETC": { name: "Ïù¥ÎçîÎ¶¨ÏõÄ ÌÅ¥ÎûòÏãù", ticker: "ETC" },
    "KRW-NEO": { name: "ÎÑ§Ïò§", ticker: "NEO" },
    "KRW-SNT": { name: "Ïä§ÌÖåÏù¥ÌÑ∞Ïä§ÎÑ§Ìä∏ÏõåÌÅ¨ÌÜ†ÌÅ∞", ticker: "SNT" },
    "KRW-MTL": { name: "Î©îÌÉà", ticker: "MTL" }
};

// ‚úÖ ÏµúÏ¥à Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•Ïö© Í∞ùÏ≤¥ (Í∞úÎ≥Ñ ÏàòÏã† Ï¶âÏãú ÌôîÎ©¥Ïóê Î∞òÏòÅ)
const coinDataMap = {};

// ‚úÖ WebSocket Ïó∞Í≤∞ Î∞è Îç∞Ïù¥ÌÑ∞ ÏàòÏã†
stompClient.connect({}, function (frame) {
    console.log("‚úÖ WebSocket Ïó∞Í≤∞Îê®:", frame);

    // Ïã§ÏãúÍ∞Ñ Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞ Íµ¨ÎèÖ
    stompClient.subscribe("/topic/price", function (message) {
        const priceData = JSON.parse(message.body);

        // ‚úÖ Í¥ÄÏã¨ ÏûàÎäî ÏΩîÏù∏Îßå ÌïÑÌÑ∞ÎßÅ
        if (!TARGET_COINS.includes(priceData.code)) {
            return;
        }

        console.log("üì• Î∞õÏùÄ WebSocket Îç∞Ïù¥ÌÑ∞:", priceData);

        // ‚úÖ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
        coinDataMap[priceData.code] = priceData;

        // ‚úÖ Í∞úÎ≥Ñ Îç∞Ïù¥ÌÑ∞Í∞Ä ÎèÑÏ∞©Ìï† ÎïåÎßàÎã§ Ï¶âÏãú ÏóÖÎç∞Ïù¥Ìä∏
        updateTable(priceData);
    });

}, function (error) {
    console.error("‚ùå WebSocket Ïó∞Í≤∞ Ïã§Ìå®:", error);
    setTimeout(() => reconnectWebSocket(), 3000);
});

// ‚úÖ Í∞úÎ≥Ñ Îç∞Ïù¥ÌÑ∞Î•º Î∞õÏïÑÏÑú Ï¶âÏãú ÏóÖÎç∞Ïù¥Ìä∏ÌïòÎäî Ìï®Ïàò
function updateTable(coin) {
    const tableBody = document.getElementById("coin-table-body");
    const existingRows = Array.from(tableBody.getElementsByTagName("tr"));
    const ticker = coin.code.replace("KRW-", ""); // Ìã∞Ïª§ Ï∂îÏ∂ú
    const existingRow = existingRows.find(row => row.dataset.ticker === ticker);

    const priceChange = (coin.changeRate * 100).toFixed(2);
    const changeClass = priceChange > 0 ? "text-green-500" : priceChange < 0 ? "text-red-500" : "text-gray-500";
    const volume = coin.acc_trade_price_24h ? (coin.acc_trade_price_24h / 1e9).toFixed(1) + "Ïñµ" : "-";

    // ‚úÖ marketNamesÏóêÏÑú ÌïúÍ∏Ä Ïù¥Î¶ÑÍ≥º Ìã∞Ïª§ Í∞ÄÏ†∏Ïò§Í∏∞
    const coinInfo = marketNames[coin.code] || { name: coin.code, ticker };

    if (existingRow) {
        // ‚úÖ Í∏∞Ï°¥ Ìñâ ÏóÖÎç∞Ïù¥Ìä∏ (Í∞ÄÍ≤©, Î≥ÄÎèôÎ•†, Í±∞ÎûòÎüâ Í∞±Ïã†)
        existingRow.children[3].textContent = `‚Ç©${coin.price.toLocaleString()}`;
        existingRow.children[4].textContent = `${priceChange}%`;
        existingRow.children[4].className = changeClass;
        existingRow.children[5].textContent = volume;
    } else {
        // ‚úÖ ÏÉàÎ°úÏö¥ ÏΩîÏù∏ Ï∂îÍ∞Ä
        const row = document.createElement("tr");
        row.dataset.ticker = ticker; // Ï§ëÎ≥µ Î∞©ÏßÄÎ•º ÏúÑÌï¥ Ìã∞Ïª§ Ï†ÄÏû•

        row.innerHTML = `
            <td><img src="https://static.upbit.com/logos/${ticker}.png" alt="${coinInfo.name}"></td>
            <td>${coinInfo.name}</td>
            <td>${coinInfo.ticker}</td>
            <td>‚Ç©${coin.price.toLocaleString()}</td>
            <td class="${changeClass}">${priceChange}%</td>
            <td>${volume}</td>
        `;

        // ÌÅ¥Î¶≠ Ïãú ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
        row.style.cursor = "pointer";
        row.addEventListener('click', () => {
            const formattedName = coinInfo.name.replace(/\s+/g, "");
            window.location.href = `/coin/coinDetail.html?name=${encodeURIComponent(formattedName)}&ticker=${encodeURIComponent(coinInfo.ticker)}`;
        });

        tableBody.appendChild(row);
    }
}

// ‚úÖ WebSocket Ïû¨Ïó∞Í≤∞ Ìï®Ïàò
function reconnectWebSocket() {
    console.log("üîÑ WebSocket Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ...");
    setTimeout(() => {
        const newSocket = new SockJS("/ws");
        stompClient.connect({}, function () {
            console.log("‚úÖ WebSocket Ïû¨Ïó∞Í≤∞Îê®");
        }, function (error) {
            console.error("‚ùå WebSocket Ïû¨Ïó∞Í≤∞ Ïã§Ìå®:", error);
        });
    }, 5000);
}
